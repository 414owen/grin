ffi effectful
  _prim_string_print :: T_String
                     -> T_Unit
  
ffi pure
  _prim_string_concat :: T_String
                      -> T_String
                      -> T_String
  _prim_string_eq :: T_String
                  -> T_String
                  -> T_Int64
  _prim_string_head :: T_String
                    -> T_Int64
  _prim_int_str :: T_Int64
                -> T_String
  
primop pure
  _prim_int_add :: T_Int64
                -> T_Int64
                -> T_Int64
  _prim_int_sub :: T_Int64
                -> T_Int64
                -> T_Int64
  _prim_int_mul :: T_Int64
                -> T_Int64
                -> T_Int64
  _prim_int_ashr :: T_Int64
                 -> T_Int64
                 -> T_Int64
  _prim_int_eq :: T_Int64
               -> T_Int64
               -> T_Bool
  _prim_int_lt :: T_Int64
               -> T_Int64
               -> T_Bool
  
idris_int_eq idris_int_eq0 idris_int_eq1 =
  (CGrInt idris_int_eq0_1) @ p.1 <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) @ p.0 <- fetch idris_int_eq1
  idris_int_eq2 <- _prim_int_eq $ idris_int_eq0_1 idris_int_eq1_1
  case idris_int_eq2 of
    #False @ alt.0 ->
      y.0 <- pure 0
      v.90 <- pure (CGrInt y.0)
      pure v.90
    #True @ alt.1 ->
      y.1 <- pure 1
      v.91 <- pure (CGrInt y.1)
      pure v.91

idris_int_lt idris_int_lt0 idris_int_lt1 =
  (CGrInt idris_int_lt0_1) @ p.3 <- fetch idris_int_lt0
  (CGrInt idris_int_lt1_1) @ p.2 <- fetch idris_int_lt1
  idris_int_lt2 <- _prim_int_lt $ idris_int_lt0_1 idris_int_lt1_1
  case idris_int_lt2 of
    #False @ alt.2 ->
      y.2 <- pure 0
      v.92 <- pure (CGrInt y.2)
      pure v.92
    #True @ alt.3 ->
      y.3 <- pure 1
      v.93 <- pure (CGrInt y.3)
      pure v.93

idris_lashr_int idris_lashr_int1 idris_lashr_int2 =
  (CGrInt idris_lashr_int1_0) @ p.5 <- fetch idris_lashr_int1
  (CGrInt idris_lashr_int2_0) @ p.4 <- fetch idris_lashr_int2
  idris_lashr_int3 <- _prim_int_ashr $ idris_lashr_int1_0 idris_lashr_int2_0
  v.94 <- pure (CGrInt idris_lashr_int3)
  pure v.94

idris_int_add idris_int_add0 idris_int_add1 =
  (CGrInt idris_int_add0_1) @ p.7 <- fetch idris_int_add0
  (CGrInt idris_int_add1_1) @ p.6 <- fetch idris_int_add1
  idris_int_add2 <- _prim_int_add $ idris_int_add0_1 idris_int_add1_1
  v.95 <- pure (CGrInt idris_int_add2)
  pure v.95

idris_int_sub idris_int_sub0 idris_int_sub1 =
  (CGrInt idris_int_sub0_1) @ p.9 <- fetch idris_int_sub0
  (CGrInt idris_int_sub1_1) @ p.8 <- fetch idris_int_sub1
  idris_int_sub2 <- _prim_int_sub $ idris_int_sub0_1 idris_int_sub1_1
  v.96 <- pure (CGrInt idris_int_sub2)
  pure v.96

idris_int_mul idris_int_mul0 idris_int_mul1 =
  (CGrInt idris_int_mul0_1) @ p.11 <- fetch idris_int_mul0
  (CGrInt idris_int_mul1_1) @ p.10 <- fetch idris_int_mul1
  idris_int_mul2 <- _prim_int_mul $ idris_int_mul0_1 idris_int_mul1_1
  v.97 <- pure (CGrInt idris_int_mul2)
  pure v.97

idris_write_str idris_write_str1 idris_write_str2 =
  (CGrString idris_write_str2_0) @ p.13 <- fetch idris_write_str2
  p.12 <- _prim_string_print $ idris_write_str2_0
  v.98 <- pure (CUnit)
  pure v.98

idris_str_concat idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) @ p.15 <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) @ p.14 <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat $ idris_str_concat1_0 idris_str_concat2_0
  v.99 <- pure (CGrString idris_str_concat3)
  pure v.99

idris_str_eq idris_str_eq1 idris_str_eq2 =
  (CGrString idris_str_eq1_0) @ p.17 <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) @ p.16 <- fetch idris_str_eq2
  idris_str_eq3 <- _prim_string_eq $ idris_str_eq1_0 idris_str_eq2_0
  v.100 <- pure (CGrInt idris_str_eq3)
  pure v.100

idris_str_head idris_str_head1 =
  (CGrString idris_str_head1_0) @ p.18 <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head $ idris_str_head1_0
  v.101 <- pure (CGrInt idris_str_head2)
  pure v.101

idris_int_str idris_int_str1 =
  (CGrInt idris_int_str1_0) @ p.19 <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str $ idris_int_str1_0
  v.102 <- pure (CGrString idris_int_str2)
  pure v.102

grinMain =
  r <- "idr_{runMain_0}" $
  pure ()

idr_Main.main =
  v.103 <- pure (CErased)
  idr_Main.main0 <- store v.103
  v.104 <- pure (CErased)
  idr_Main.main1 <- store v.104
  v.105 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main2 <- store v.105
  v.106 <- pure (CErased)
  idr_Main.main3 <- store v.106
  y.12 <- pure 100
  v.107 <- pure (CGrInt y.12)
  idr_Main.main4 <- store v.107
  y.13 <- pure 52816
  v.108 <- pure (CGrInt y.13)
  idr_Main.main5 <- store v.108
  idr_Main.main5_val <- idr_Main.randoms $ idr_Main.main5
  idr_Main.main5_5 <- store idr_Main.main5_val
  idr_Main.main3_val <- idr_Prelude.Stream.take $ idr_Main.main3 idr_Main.main4 idr_Main.main5_5
  idr_Main.main3_6 <- store idr_Main.main3_val
  v.109 <- pure (C"idr_{U_Prelude.Interactive.printLn'_1}" idr_Main.main0 idr_Main.main1 idr_Main.main2 idr_Main.main3_6)
  pure v.109

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow0 idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow2 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- "idr_{APPLY_0}" $ idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- fetch idr_Prelude.Show.primNumShow2
  idr_Prelude.Show.primNumShow5_val_9 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.App) @ alt.4 ->
      y.18 <- pure 6
      v.110 <- pure (CGrInt y.18)
      pure v.110
    (Cidr_Prelude.Show.Backtick) @ alt.5 ->
      y.19 <- pure 3
      v.111 <- pure (CGrInt y.19)
      pure v.111
    (Cidr_Prelude.Show.Dollar) @ alt.6 ->
      y.20 <- pure 2
      v.112 <- pure (CGrInt y.20)
      pure v.112
    (Cidr_Prelude.Show.Eq) @ alt.7 ->
      y.21 <- pure 1
      v.113 <- pure (CGrInt y.21)
      pure v.113
    (Cidr_Prelude.Show.Open) @ alt.8 ->
      y.22 <- pure 0
      v.114 <- pure (CGrInt y.22)
      pure v.114
    (Cidr_Prelude.Show.PrefixMinus) @ alt.9 ->
      y.23 <- pure 5
      v.115 <- pure (CGrInt y.23)
      pure v.115
    (Cidr_Prelude.Show.User) @ alt.10 ->
      y.24 <- pure 4
      v.116 <- pure (CGrInt y.24)
      pure v.116
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_9
  y.25 <- pure 5
  v.117 <- pure (CGrInt y.25)
  idr_Prelude.Show.primNumShow6 <- store v.117
  idr_Prelude.Show.primNumShow5_val_8 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" $ idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_10 <- store idr_Prelude.Show.primNumShow5_val_8
  idr_Prelude.Show.primNumShow5_val_11 <- fetch idr_Prelude.Show.primNumShow5_10
  idr_Prelude.Show.primNumShow5_val_7 <- case idr_Prelude.Show.primNumShow5_val_11 of
    (Cidr_Prelude.Interfaces.GT) @ alt.11 ->
      v.118 <- pure (Cidr_Prelude.Bool.True)
      pure v.118
    #default @ alt.12 ->
      idr_Prelude.Show.primNumShow2_val_14 <- fetch idr_Prelude.Show.primNumShow2
      idr_Prelude.Show.primNumShow6_val_13 <- case idr_Prelude.Show.primNumShow2_val_14 of
        (Cidr_Prelude.Show.App) @ alt.13 ->
          y.26 <- pure 6
          v.119 <- pure (CGrInt y.26)
          pure v.119
        (Cidr_Prelude.Show.Backtick) @ alt.14 ->
          y.27 <- pure 3
          v.120 <- pure (CGrInt y.27)
          pure v.120
        (Cidr_Prelude.Show.Dollar) @ alt.15 ->
          y.28 <- pure 2
          v.121 <- pure (CGrInt y.28)
          pure v.121
        (Cidr_Prelude.Show.Eq) @ alt.16 ->
          y.29 <- pure 1
          v.122 <- pure (CGrInt y.29)
          pure v.122
        (Cidr_Prelude.Show.Open) @ alt.17 ->
          y.30 <- pure 0
          v.123 <- pure (CGrInt y.30)
          pure v.123
        (Cidr_Prelude.Show.PrefixMinus) @ alt.18 ->
          y.31 <- pure 5
          v.124 <- pure (CGrInt y.31)
          pure v.124
        (Cidr_Prelude.Show.User) @ alt.19 ->
          y.32 <- pure 4
          v.125 <- pure (CGrInt y.32)
          pure v.125
      idr_Prelude.Show.primNumShow6_15 <- store idr_Prelude.Show.primNumShow6_val_13
      y.33 <- pure 5
      v.126 <- pure (CGrInt y.33)
      idr_Prelude.Show.primNumShow7 <- store v.126
      idr_Prelude.Show.primNumShow6_val_12 <- idris_int_eq $ idr_Prelude.Show.primNumShow6_15 idr_Prelude.Show.primNumShow7
      idr_Prelude.Show.primNumShow6_16 <- store idr_Prelude.Show.primNumShow6_val_12
      idr_Prelude.Show.primNumShow6_val_17 <- fetch idr_Prelude.Show.primNumShow6_16
      case idr_Prelude.Show.primNumShow6_val_17 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) @ alt.20 ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 @ alt.21 ->
              v.127 <- pure (Cidr_Prelude.Bool.False)
              pure v.127
            #default @ alt.22 ->
              v.128 <- pure (Cidr_Prelude.Bool.True)
              pure v.128
        #default @ alt.23 ->
          v.129 <- pure (Cidr_Prelude.Bool.True)
          pure v.129
  idr_Prelude.Show.primNumShow5_18 <- store idr_Prelude.Show.primNumShow5_val_7
  idr_Prelude.Show.primNumShow5_val_19 <- fetch idr_Prelude.Show.primNumShow5_18
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_19 of
    (Cidr_Prelude.Bool.False) @ alt.24 ->
      v.130 <- pure (Cidr_Prelude.Bool.False)
      pure v.130
    (Cidr_Prelude.Bool.True) @ alt.25 ->
      y.34 <- pure #""
      v.131 <- pure (CGrString y.34)
      idr_Prelude.Show.primNumShow6_24 <- store v.131
      idr_Prelude.Show.primNumShow6_val_22 <- idris_str_eq $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_24
      idr_Prelude.Show.primNumShow6_25 <- store idr_Prelude.Show.primNumShow6_val_22
      idr_Prelude.Show.primNumShow6_val_26 <- fetch idr_Prelude.Show.primNumShow6_25
      idr_Prelude.Show.primNumShow6_val_21 <- case idr_Prelude.Show.primNumShow6_val_26 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_27) @ alt.26 ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_27 of
            0 @ alt.27 ->
              v.132 <- pure (Cidr_Prelude.Bool.True)
              pure v.132
            #default @ alt.28 ->
              v.133 <- pure (Cidr_Prelude.Bool.False)
              pure v.133
        #default @ alt.29 ->
          v.134 <- pure (Cidr_Prelude.Bool.False)
          pure v.134
      idr_Prelude.Show.primNumShow6_28 <- store idr_Prelude.Show.primNumShow6_val_21
      v.135 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_30 <- store v.135
      idr_Prelude.Show.primNumShow6_val_20 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" $ idr_Prelude.Show.primNumShow6_28 idr_Prelude.Show.primNumShow7_30
      idr_Prelude.Show.primNumShow6_31 <- store idr_Prelude.Show.primNumShow6_val_20
      idr_Prelude.Show.primNumShow6_val_32 <- fetch idr_Prelude.Show.primNumShow6_31
      case idr_Prelude.Show.primNumShow6_val_32 of
        (Cidr_Prelude.Basics.No) @ alt.30 ->
          v.136 <- pure (Cidr_Prelude.Bool.False)
          pure v.136
        (Cidr_Prelude.Basics.Yes) @ alt.31 ->
          idr_Prelude.Show.primNumShow7_val_34 <- idris_str_head $ idr_Prelude.Show.primNumShow4
          idr_Prelude.Show.primNumShow7_35 <- store idr_Prelude.Show.primNumShow7_val_34
          y.35 <- pure 45
          v.137 <- pure (CGrInt y.35)
          idr_Prelude.Show.primNumShow8 <- store v.137
          idr_Prelude.Show.primNumShow7_val_33 <- idris_int_eq $ idr_Prelude.Show.primNumShow7_35 idr_Prelude.Show.primNumShow8
          idr_Prelude.Show.primNumShow7_36 <- store idr_Prelude.Show.primNumShow7_val_33
          idr_Prelude.Show.primNumShow7_val_37 <- fetch idr_Prelude.Show.primNumShow7_36
          case idr_Prelude.Show.primNumShow7_val_37 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_38) @ alt.32 ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_38 of
                0 @ alt.33 ->
                  v.138 <- pure (Cidr_Prelude.Bool.False)
                  pure v.138
                #default @ alt.34 ->
                  v.139 <- pure (Cidr_Prelude.Bool.True)
                  pure v.139
            #default @ alt.35 ->
              v.140 <- pure (Cidr_Prelude.Bool.True)
              pure v.140
  idr_Prelude.Show.primNumShow5_39 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_40 <- fetch idr_Prelude.Show.primNumShow5_39
  case idr_Prelude.Show.primNumShow5_val_40 of
    (Cidr_Prelude.Bool.False) @ alt.36 ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) @ alt.37 ->
      y.36 <- pure #"("
      v.141 <- pure (CGrString y.36)
      idr_Prelude.Show.primNumShow6_42 <- store v.141
      y.37 <- pure #")"
      v.142 <- pure (CGrString y.37)
      idr_Prelude.Show.primNumShow7_45 <- store v.142
      idr_Prelude.Show.primNumShow7_val_43 <- idris_str_concat $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_45
      idr_Prelude.Show.primNumShow7_46 <- store idr_Prelude.Show.primNumShow7_val_43
      idris_str_concat $ idr_Prelude.Show.primNumShow6_42 idr_Prelude.Show.primNumShow7_46

idr_prim__toStrInt idr_prim__toStrInt0 =
  idris_int_str $ idr_prim__toStrInt0

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'0 idr_Prelude.Interactive.printLn'1 idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 idr_Prelude.Interactive.printLn'4 =
  idr_Prelude.Interactive.printLn'5_val_48 <- "idr_{APPLY_0}" $ idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_48
  y.38 <- pure #"\n"
  v.143 <- pure (CGrString y.38)
  idr_Prelude.Interactive.printLn'6 <- store v.143
  idr_Prelude.Interactive.printLn'5_val_47 <- idris_str_concat $ idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
  idr_Prelude.Interactive.printLn'5_49 <- store idr_Prelude.Interactive.printLn'5_val_47
  idr_Prelude.Interactive.printLn'5_val <- idris_write_str $ idr_Prelude.Interactive.printLn'4 idr_Prelude.Interactive.printLn'5_49
  idr_Prelude.Interactive.printLn'5_50 <- store idr_Prelude.Interactive.printLn'5_val
  v.144 <- pure (Cidr_MkUnit)
  pure v.144

idr_Main.randoms idr_Main.randoms0 =
  y.39 <- pure 1664525
  v.145 <- pure (CGrInt y.39)
  idr_Main.randoms1 <- store v.145
  idr_Main.randoms1_val_51 <- idris_int_mul $ idr_Main.randoms1 idr_Main.randoms0
  idr_Main.randoms1_53 <- store idr_Main.randoms1_val_51
  y.40 <- pure 1013904223
  v.146 <- pure (CGrInt y.40)
  idr_Main.randoms2 <- store v.146
  idr_Main.randoms1_val <- idris_int_add $ idr_Main.randoms1_53 idr_Main.randoms2
  idr_Main.randoms1_54 <- store idr_Main.randoms1_val
  y.41 <- pure 2
  v.147 <- pure (CGrInt y.41)
  idr_Main.randoms2_57 <- store v.147
  idr_Main.randoms2_val_55 <- idris_lashr_int $ idr_Main.randoms1_54 idr_Main.randoms2_57
  idr_Main.randoms2_58 <- store idr_Main.randoms2_val_55
  v.148 <- pure (C"idr_{P_Main.{randoms_2}_0}" idr_Main.randoms1_54)
  idr_Main.randoms3 <- store v.148
  v.149 <- pure (Cidr_Prelude.Stream.:: idr_Main.randoms2_58 idr_Main.randoms3)
  pure v.149

idr_Prelude.Stream.take idr_Prelude.Stream.take0 idr_Prelude.Stream.take1 idr_Prelude.Stream.take2 =
  idr_Prelude.Stream.take1_val <- fetch idr_Prelude.Stream.take1
  case idr_Prelude.Stream.take1_val of
    (CGrInt idr_Prelude.Stream.take_cpat_LInt64_0) @ alt.38 ->
      case idr_Prelude.Stream.take_cpat_LInt64_0 of
        0 @ alt.39 ->
          v.150 <- pure (Cidr_Prelude.List.Nil)
          pure v.150
        #default @ alt.40 ->
          (Cidr_Prelude.Stream.:: idr_Prelude.Stream.take3 idr_Prelude.Stream.take4) @ idr_Prelude.Stream.take2_val <- fetch idr_Prelude.Stream.take2
          v.151 <- pure (CErased)
          idr_Prelude.Stream.take5 <- store v.151
          y.45 <- pure 1
          v.152 <- pure (CGrInt y.45)
          idr_Prelude.Stream.take6 <- store v.152
          idr_Prelude.Stream.take6_val <- idris_int_sub $ idr_Prelude.Stream.take1 idr_Prelude.Stream.take6
          idr_Prelude.Stream.take6_63 <- store idr_Prelude.Stream.take6_val
          idr_Prelude.Stream.take7_val <- "idr_{EVAL_0}" $ idr_Prelude.Stream.take4
          idr_Prelude.Stream.take7 <- store idr_Prelude.Stream.take7_val
          idr_Prelude.Stream.take5_val <- idr_Prelude.Stream.take $ idr_Prelude.Stream.take5 idr_Prelude.Stream.take6_63 idr_Prelude.Stream.take7
          idr_Prelude.Stream.take5_64 <- store idr_Prelude.Stream.take5_val
          v.153 <- pure (Cidr_Prelude.List.:: idr_Prelude.Stream.take3 idr_Prelude.Stream.take5_64)
          pure v.153
    #default @ alt.41 ->
      (Cidr_Prelude.Stream.:: idr_Prelude.Stream.take3_66 idr_Prelude.Stream.take4_67) @ idr_Prelude.Stream.take2_val_65 <- fetch idr_Prelude.Stream.take2
      v.154 <- pure (CErased)
      idr_Prelude.Stream.take5_70 <- store v.154
      y.48 <- pure 1
      v.155 <- pure (CGrInt y.48)
      idr_Prelude.Stream.take6_73 <- store v.155
      idr_Prelude.Stream.take6_val_71 <- idris_int_sub $ idr_Prelude.Stream.take1 idr_Prelude.Stream.take6_73
      idr_Prelude.Stream.take6_74 <- store idr_Prelude.Stream.take6_val_71
      idr_Prelude.Stream.take7_val_75 <- "idr_{EVAL_0}" $ idr_Prelude.Stream.take4_67
      idr_Prelude.Stream.take7_76 <- store idr_Prelude.Stream.take7_val_75
      idr_Prelude.Stream.take5_val_68 <- idr_Prelude.Stream.take $ idr_Prelude.Stream.take5_70 idr_Prelude.Stream.take6_74 idr_Prelude.Stream.take7_76
      idr_Prelude.Stream.take5_77 <- store idr_Prelude.Stream.take5_val_68
      v.156 <- pure (Cidr_Prelude.List.:: idr_Prelude.Stream.take3_66 idr_Prelude.Stream.take5_77)
      pure v.156

"idr_{APPLY_0}" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") @ alt.42 ->
      "idr_Main.{main_0}" $ "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_1}_1}") @ alt.43 ->
      "idr_Main.{main_1}" $ "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Interactive.printLn'_1}" "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5") @ alt.44 ->
      idr_Prelude.Interactive.printLn' $ "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5" "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrInt_1}") @ alt.45 ->
      idr_prim__toStrInt $ "idr_{APPLY_0}1"
    #default @ alt.46 ->
      v.157 <- pure (CErased)
      pure v.157

"idr_{EVAL_0}" "idr_{EVAL_0}0" =
  "idr_{EVAL_0}0_val" <- fetch "idr_{EVAL_0}0"
  case "idr_{EVAL_0}0_val" of
    (C"idr_{P_Main.{randoms_2}_0}" "idr_{EVAL_0}1") @ alt.47 ->
      "idr_{EVAL_0}0_val_78" <- "idr_Main.{randoms_2}" $ "idr_{EVAL_0}1"
      p.20 <- update "idr_{EVAL_0}0" "idr_{EVAL_0}0_val_78"
      pure "idr_{EVAL_0}0_val_78"
    #default @ alt.48 ->
      fetch "idr_{EVAL_0}0"

"idr_Main.{main_0}" "idr_Main.{main_0}0" =
  v.158 <- pure (CErased)
  "idr_Main.{main_0}1" <- store v.158
  v.159 <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Main.{main_0}2" <- store v.159
  v.160 <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_0}3" <- store v.160
  idr_Prelude.Show.primNumShow $ "idr_Main.{main_0}1" "idr_Main.{main_0}2" "idr_Main.{main_0}3" "idr_Main.{main_0}0"

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_79" <- idr_Main.main $
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_79"
  v.161 <- pure (CErased)
  "idr_{runMain_0}1" <- store v.161
  "idr_{runMain_0}0_val" <- "idr_{APPLY_0}" $ "idr_{runMain_0}0" "idr_{runMain_0}1"
  "idr_{runMain_0}0_80" <- store "idr_{runMain_0}0_val"
  "idr_{EVAL_0}" $ "idr_{runMain_0}0_80"

"idr_Main.{main_1}" "idr_Main.{main_1}0" =
  y.51 <- pure #"["
  v.162 <- pure (CGrString y.51)
  "idr_Main.{main_1}1" <- store v.162
  v.163 <- pure (CErased)
  "idr_Main.{main_1}2" <- store v.163
  v.164 <- pure (CErased)
  "idr_Main.{main_1}3" <- store v.164
  v.165 <- pure (C"idr_{U_Main.{main_0}_1}")
  "idr_Main.{main_1}4" <- store v.165
  y.52 <- pure #""
  v.166 <- pure (CGrString y.52)
  "idr_Main.{main_1}5" <- store v.166
  "idr_Main.{main_1}2_val_81" <- "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" $ "idr_Main.{main_1}2" "idr_Main.{main_1}3" "idr_Main.{main_1}4" "idr_Main.{main_1}5" "idr_Main.{main_1}0"
  "idr_Main.{main_1}2_83" <- store "idr_Main.{main_1}2_val_81"
  y.53 <- pure #"]"
  v.167 <- pure (CGrString y.53)
  "idr_Main.{main_1}3_85" <- store v.167
  "idr_Main.{main_1}2_val" <- idris_str_concat $ "idr_Main.{main_1}2_83" "idr_Main.{main_1}3_85"
  "idr_Main.{main_1}2_86" <- store "idr_Main.{main_1}2_val"
  idris_str_concat $ "idr_Main.{main_1}1" "idr_Main.{main_1}2_86"

"idr_Main.{randoms_2}" "idr_Main.{randoms_2}0" =
  idr_Main.randoms $ "idr_Main.{randoms_2}0"

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':00" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':01" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") @ alt.49 ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) @ alt.50 ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- "idr_{APPLY_0}" $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val"
          idris_str_concat $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07"
        #default @ alt.51 ->
          v.168 <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_88" <- store v.168
          v.169 <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" <- store v.169
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_90" <- "idr_{APPLY_0}" $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_90"
          y.54 <- pure #", "
          v.170 <- pure (CGrString y.54)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010" <- store v.170
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_89" <- idris_str_concat $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_91" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_89"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- idris_str_concat $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_91"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_92" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_88" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_92" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
    (Cidr_Prelude.List.Nil) @ alt.52 ->
      fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01"
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.False) @ alt.53 ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" of
        (Cidr_Prelude.Bool.False) @ alt.54 ->
          v.171 <- pure (Cidr_Prelude.Basics.Yes)
          pure v.171
        (Cidr_Prelude.Bool.True) @ alt.55 ->
          v.172 <- pure (Cidr_Prelude.Basics.No)
          pure v.172
    (Cidr_Prelude.Bool.True) @ alt.56 ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_93" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_93" of
        (Cidr_Prelude.Bool.False) @ alt.57 ->
          v.173 <- pure (Cidr_Prelude.Basics.No)
          pure v.173
        (Cidr_Prelude.Bool.True) @ alt.58 ->
          v.174 <- pure (Cidr_Prelude.Basics.Yes)
          pure v.174

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- idris_int_eq $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_94" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_94" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") @ alt.59 ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 @ alt.60 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- idris_int_lt $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_95" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_95" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_96") @ alt.61 ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_96" of
                0 @ alt.62 ->
                  v.175 <- pure (Cidr_Prelude.Interfaces.GT)
                  pure v.175
                #default @ alt.63 ->
                  v.176 <- pure (Cidr_Prelude.Interfaces.LT)
                  pure v.176
            #default @ alt.64 ->
              v.177 <- pure (Cidr_Prelude.Interfaces.LT)
              pure v.177
        #default @ alt.65 ->
          v.178 <- pure (Cidr_Prelude.Interfaces.EQ)
          pure v.178
    #default @ alt.66 ->
      v.179 <- pure (Cidr_Prelude.Interfaces.EQ)
      pure v.179
