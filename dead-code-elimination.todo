Dead data elimination:
  - for DDE, we assume that node name introduction has already taken place
  - for dummy substitution LVA is sufficient
  - for field deletion, CBy analysis is also required
    - we have to scrutinize every case expression, and group the overlapping producers together
    - in order to be able to delete a field (wtih a given tag), that field must be dead (with the given tag) for all producers in the group

TODO:
  HIGH:
    - apply inlining should also inline ap
    - implement type safe undefined node generation for tests (Test.Test) 
  
  LOW:
    - rename dead procedure elimination to dead function elimination
    - genProgWith (in Test.Test) -> readd dead parameter elimination
    - implement type env transformation for DDE
    - linter should check whether calculated types match with annotations
    - tests: HeapIndirectSimple -> HeapIndirectComplex ? 
  
  NOTES:
    - before optimising P nodes, make sure to test whether the current optimisations are unable to handle the task

  QUESTIONS:
    - do all P nodes of the same function have the same liveness?
    (even after apply inlining)
    - if they do, can their fields be deleted solely based on the function args' liveness?
  
  if they do:
    - we don't have to introduce new names for them (probably same for F nodes)
    - (args' == args after dde) and (l == no. live args of foo) and (n == no. args'): 
    - PNfoo args --> P(l-n)foo args'
    - if last argument is deleted, then do ... ?
  
  
  
Archive:
  ✘ store variable name <-> heap location is a bijective mapping @cancelled(18-10-28 23:34)
  ✘ make sure that dead (data/parameter/procedure/variable) elimination are executed after each other in the pipeline @cancelled(18-10-28 23:33)
  ✔ fix confuence test behaviour for analysis based transformations @done(18-10-28 23:32)
  ✔ lift Undefined to Val level @done(18-10-12 22:43) @project(TODO)
  ✔ introduce type annotations @done(18-10-12 22:43) @project(TODO)
  ✔ pretty print type annotations @done(18-10-12 22:45) @project(TODO)
  ✔ introduce heap type annotations in the begininning of the program @done(18-10-12 22:43) @project(TODO)
  ✔ write parser for type annotations @done(18-10-12 22:43) @project(TODO)
  ✔ Grin.Grin FoldNames @done(18-10-14 00:56) @project(TODO)
  ✔ rename node name introduction to producer name introduction @done(18-10-14 01:17) @project(TODO)
  ✔ this transformation only has to introduce new name for producers, @done(18-10-14 01:17) @project(TODO)
  ✘ write tests for node name introduction @cancelled(18-10-12 22:44) @project(TODO)
  ✘ introduce new names for applications: @cancelled(18-10-12 22:44) @project(TODO)
  ✔ implement heap type env parsing @done(18-10-12 22:44) @project(TODO)
  ✔ implement annotated line type env parsing @done(18-10-12 22:44) @project(TODO)
  ✔ extend HPT (and CBy) so that they gather type info from #undefined nodes @started(18-10-12 22:44) @done(18-10-14 00:52) @lasted(1d2h8m35s) @project(TODO)
  ✔ tests for HPT, CBy with undefineds @done(18-10-14 00:52) @project(TODO)
